package mallcollection.joinearn.com.mymall.model.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import mallcollection.joinearn.com.mymall.model.bean.Brand;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "brand".
*/
public class BrandDao extends AbstractDao<Brand, Long> {

    public static final String TABLENAME = "brand";

    /**
     * Properties of entity Brand.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Icon = new Property(2, String.class, "icon", false, "ICON");
        public final static Property Point = new Property(3, String.class, "point", false, "POINT");
        public final static Property Location = new Property(4, String.class, "location", false, "LOCATION");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property Eng_name = new Property(7, String.class, "eng_name", false, "ENG_NAME");
        public final static Property Item_kind = new Property(8, String.class, "item_kind", false, "ITEM_KIND");
        public final static Property Main_kind = new Property(9, String.class, "main_kind", false, "MAIN_KIND");
        public final static Property Status = new Property(10, String.class, "status", false, "STATUS");
        public final static Property Change_time = new Property(11, String.class, "change_time", false, "CHANGE_TIME");
    }


    public BrandDao(DaoConfig config) {
        super(config);
    }
    
    public BrandDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"brand\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NAME\" TEXT UNIQUE ," + // 1: name
                "\"ICON\" TEXT," + // 2: icon
                "\"POINT\" TEXT," + // 3: point
                "\"LOCATION\" TEXT," + // 4: location
                "\"ADDRESS\" TEXT," + // 5: address
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"ENG_NAME\" TEXT," + // 7: eng_name
                "\"ITEM_KIND\" TEXT," + // 8: item_kind
                "\"MAIN_KIND\" TEXT," + // 9: main_kind
                "\"STATUS\" TEXT," + // 10: status
                "\"CHANGE_TIME\" TEXT);"); // 11: change_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"brand\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Brand entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(4, point);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String eng_name = entity.getEng_name();
        if (eng_name != null) {
            stmt.bindString(8, eng_name);
        }
 
        String item_kind = entity.getItem_kind();
        if (item_kind != null) {
            stmt.bindString(9, item_kind);
        }
 
        String main_kind = entity.getMain_kind();
        if (main_kind != null) {
            stmt.bindString(10, main_kind);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        String change_time = entity.getChange_time();
        if (change_time != null) {
            stmt.bindString(12, change_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Brand entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(4, point);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String eng_name = entity.getEng_name();
        if (eng_name != null) {
            stmt.bindString(8, eng_name);
        }
 
        String item_kind = entity.getItem_kind();
        if (item_kind != null) {
            stmt.bindString(9, item_kind);
        }
 
        String main_kind = entity.getMain_kind();
        if (main_kind != null) {
            stmt.bindString(10, main_kind);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        String change_time = entity.getChange_time();
        if (change_time != null) {
            stmt.bindString(12, change_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Brand readEntity(Cursor cursor, int offset) {
        Brand entity = new Brand( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // point
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // location
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // eng_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // item_kind
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // main_kind
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // status
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // change_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Brand entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPoint(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEng_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setItem_kind(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMain_kind(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setChange_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Brand entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Brand entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Brand entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
